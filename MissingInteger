// that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.
// For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

// Given A = [1, 2, 3], the function should return 4.
// Given A = [−1, −3], the function should return 1.

// Assume that:
// - N is an integer within the range [1..100,000];
// - each element of array A is an integer within the range [−1,000,000..1,000,000].

// Result: https://app.codility.com/demo/results/training45ERSD-Z6P/

using System;

class Solution {
         public int solution(int[] A) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
        Array.Sort(A);
        int alen = A.Length;
        int max = A[alen-1];
        int min = A[0] <= 0 ? 0 : A[0] - 1;
        if(max <= 0) return 1;
        
        max = max + 1;
        bool[] arrPos = new bool[max];
        // Console.WriteLine("Length {0}", arrPos.Length);
        for(int i=0; i<alen; i++) {
            int val = A[i];
            int pos = val > 0 ? val : 0;
            if(pos < max && !arrPos[pos]) {
                arrPos[pos] = true;
            }
        }
        
        int minPos = max;
        for(int pos=0;pos<max; pos++) {
            if(!arrPos[pos] && pos > 0 && pos < minPos) {
                minPos = pos;
            }
            // Console.WriteLine("{0} {1}",pos, arrPos[pos]);
        }
        
        return minPos;
    }
}
