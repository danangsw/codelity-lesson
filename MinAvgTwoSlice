// A non-empty array A consisting of N integers is given. A pair of integers (P, Q), 
// such that 0 ≤ P < Q < N, is called a slice of array A (notice that the slice contains at least two elements).
// The average of a slice (P, Q) is the sum of A[P] + A[P + 1] + ... + A[Q] divided by the length of the slice.
// To be precise, the average equals (A[P] + A[P + 1] + ... + A[Q]) / (Q − P + 1).

// For example, array A such that:

//    A[0] = 4
//    A[1] = 2
//    A[2] = 2
//    A[3] = 5
//    A[4] = 1
//    A[5] = 5
//    A[6] = 8

// contains the following example slices:
// slice (1, 2), whose average is (2 + 2) / 2 = 2;
// slice (3, 4), whose average is (5 + 1) / 2 = 3;
// slice (1, 4), whose average is (2 + 2 + 5 + 1) / 4 = 2.5.
// The goal is to find the starting position of a slice whose average is minimal.

// Result: https://app.codility.com/demo/results/training2DUGH4-YUT/

using System;

class Solution {
    public int solution(int[] A) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
            int minPos = -1;
            double minValue = Double.MaxValue;

            for (int i = 0; i < A.Length - 1; i++)
            {
                double ave2 = (float)((A[i] + A[i + 1]) / 2.0);
                if (ave2 < minValue)
                {
                    minPos = i;
                    minValue = ave2;
                }

                if (i < A.Length - 2)
                {
                    double ave3 = ((A[i] + A[i + 1] + A[i + 2]) / 3.0);
                    if (ave3 < minValue)
                    {
                        minPos = i;
                        minValue = ave3;
                    }
                }
                // Console.WriteLine("{0} {1} {2}", i, minPos, minValue);
            }

            return minPos;
    }
}
